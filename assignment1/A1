%Clear all
clear;clc;

%radii constants
r = 0.25;
l =  0.3;

%Initial state
xi = [0;  %x
      0;  %y
      0]; %theta
  
% Prior
mu = [0 0 0]'; % mean (mu)
S = 1*eye(3);% covariance (Sigma)

%Discrete motion model
Ad = [1 0 0;
      0 1 0;
      0 0 1];
  
%Motion model disturbance
R = [0.01^2  0 0; 
      0 0.01^2 0; 
      0 0 (0.1*pi/180)^2];
[RE, Re] = eig (R);

%Discrete measurement model
Cd = [1 0 0;
      0 1 0;
      0 0 (1 - 9.7*pi/180)];

%Measurement model disturbance
Q = [0.5^2 0 0; 
     0 0.5^2 0; 
     0 0 (10*pi/180)^2];
[QE, Qe] = eig (Q);

% Simulation Initializations
dt = 0.1;
T = 15;
t = 0:dt:T;
n = length(Ad(1,:));
x = zeros(n,length(t));
x(:,1) = xi;
m = length(Q(:,1));
y = zeros(m,length(t));
mup_S = zeros(n,length(t));
mu_S = zeros(n,length(t));

% run 150 times 
for i=2:length(t)

    %input speeds (rad/s)
    w1 =   16.0984;
    w2 =  -15.4419;
    w3 =  0.8515;
    u = [ w1; w2; w3];

    %straight line
    %{
    w1 =   2.0;
    w2 =  -1.0;
    w3 =  -1.0;
    %}
    %circlee
    %{
    w1 =   16.0984;
    w2 =  -15.4419;
    w3 =  0.8515;
    %}
    
    %motion model 
    e  =                RE*sqrt(Re)*randn(n,1);
    
    B1 =       [cos(x(3,i-1)) -sin(x(3,i-1)) 0;
                sin(x(3,i-1))  cos(x(3,i-1)) 0;
                0              0             1];
      
    B2 = [0      -2/3*r*cos(30)  2/3*r*cos(30);
          2/3*r  -2/3*r*sin(30)  2/3*r*sin(30);
          r/3/l          r/3/l          r/3/l];
      
    % Update motion model
    x(:,i) =     Ad*x(:,i-1) + B1*B2*u*dt + e;

    %measurement model
    d      =           QE*sqrt(Qe)*randn(m,1);
    
    Dd     = [0 0 0; 
              0 0 0; 
              0 0 0];
    % Update measurement
    y(:,i) =            Cd*x(:,i) + Dd*u  + d;
    
    %% Extended Kalman Filter Estimation
 
    %Linearization      
    Gt = [1 0 ((-B2(2,1)*w1 -B2(2,2)*w2 -B2(2,3)*w3)*cos(x(3,i-1)) + (-B2(1,2)*w2 -B2(1,3)*w3)*sin(x(3,i-1)));
          0 1 ((-B2(2,1)*w1 -B2(2,2)*w2 -B2(2,3)*w3)*sin(x(3,i-1)) + (-B2(1,2)*w2 -B2(1,3)*w3)*cos(x(3,i-1)));
          0 0 1];
      
    % Prediction update
    mup = Ad*mu + B1*B2*u*dt;
    Sp = Gt*S*Gt' + R;

    % Measurement update
    K = Sp*Cd'*inv(Cd*Sp*Cd'+Q);
    mu = mup + K*(y(:,i)-Cd*mup);
    S = (eye(n)-K*Cd)*Sp;
    
    % Store results
    mup_S(:,i) = mup;
    mu_S(:,i) = mu;
    
    
   
figure(1);clf; hold on;
plot(x(1,2:i),x(2,2:i), 'ro--')
plot(mu_S(1,2:i),mu_S(2,2:i), 'bx--')
mu_pos = [mu(1) mu(2)];
S_pos = [S(1,1) S(1,2); S(2,1) S(2,2)];
error_ellipse(S_pos,mu_pos,0.75);
error_ellipse(S_pos,mu_pos,0.95);
title('True state and belief')
axis equal
legend('state','belief');
%axis([-1 20 -10 10])
    
end

%% Plot results
    
  
figure(1);clf; hold on;
plot(x(1,:),x(2,:), 'ro--')
plot(mu_S(1,:),mu_S(2,:), 'bx--')
mu_pos = [mu(1) mu(2)];
S_pos = [S(1,1) S(1,2); S(2,1) S(2,2)];
error_ellipse(S_pos,mu_pos,0.75);
error_ellipse(S_pos,mu_pos,0.95);
title('True state and belief')
axis equal
legend('state','belief');
%axis([-1 20 -10 10])



% %draw robot out
% figure(1);clf;
% for i=1:2:length(x)
%     clf;hold on;
%     drawcar(-x(2,i),x(1,i),x(3,i)+pi/2,0.1,1)
%     plot(-x(2,1:i), x(1,1:i), 'bx');
%     axis equal;
%     %axis([-1.0 1.0 -1.0 1.0]);
%     drawnow;
% end


